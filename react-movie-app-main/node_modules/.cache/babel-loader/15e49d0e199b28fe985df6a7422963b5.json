{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\PROG\\\\exercicios\\\\PROJETO 2\\\\Appmovie\\\\react-movie-app-main\\\\src\\\\pages\\\\MoviePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nexport function MoviePage(props) {\n  _s();\n\n  const [movieInfo, setMovieInfo] = useState([]);\n  const id = props.id;\n\n  const getMovieInfo = async id => {\n    const url = `https://api.themoviedb.org/3/find/${id}?api_key=4a6706e6c275ed719d172b6dc5f207f0&language=en-US&external_source=imdb_id`; //quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\n\n    const response = await fetch(url); //aqui ele converte o http para json \n\n    const responseJson = await response.json(); //criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\n    //.Search é a array onde contem os filmes quando pesquisamos na API\n\n    if (responseJson) {\n      setMovieInfo(responseJson);\n    }\n  };\n\n  getMovieInfo(id);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [props.poster, \" \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), console.log(movieInfo), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.poster,\n      alt: \"movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MoviePage, \"Cf+giB1HJ2rnjcFRykEZhk05Y1s=\");\n\n_c = MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"sources":["F:/PROG/exercicios/PROJETO 2/Appmovie/react-movie-app-main/src/pages/MoviePage.js"],"names":["React","useState","MoviePage","props","movieInfo","setMovieInfo","id","getMovieInfo","url","response","fetch","responseJson","json","poster","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAE5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMK,EAAE,GAAGH,KAAK,CAACG,EAAjB;;AACA,QAAMC,YAAY,GAAG,MAAOD,EAAP,IAAc;AACrC,UAAME,GAAG,GAAI,qCAAoCF,EAAG,kFAApD,CADqC,CAErC;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CAHqC,CAIrC;;AACA,UAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CALqC,CAOrC;AACA;;AACA,QAAID,YAAJ,EAAkB;AACjBN,MAAAA,YAAY,CAACM,YAAD,CAAZ;AACA;AACD,GAZE;;AAcAJ,EAAAA,YAAY,CAACD,EAAD,CAAZ;AAEA,sBACI;AAAA,4BACI;AAAA,iBAAKH,KAAK,CAACU,MAAX,OAAoBP,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKQ,OAAO,CAACC,GAAR,CAAYX,SAAZ,CAFL,eAGI;AAAK,MAAA,GAAG,EAAED,KAAK,CAACU,MAAhB;AAAwB,MAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAQH;;GA5BeX,S;;KAAAA,S","sourcesContent":["import React, { useState } from \"react\"\r\n\r\nexport function MoviePage(props){\r\n\r\n    const [movieInfo, setMovieInfo] = useState([]);\r\n    const id = props.id\r\n    const getMovieInfo = async (id) => {\r\n\t\tconst url = `https://api.themoviedb.org/3/find/${id}?api_key=4a6706e6c275ed719d172b6dc5f207f0&language=en-US&external_source=imdb_id`;        \r\n\t\t//quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\r\n\t\tconst response = await fetch(url);\r\n\t\t//aqui ele converte o http para json \r\n\t\tconst responseJson = await response.json();\r\n\r\n\t\t//criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\r\n\t\t//.Search é a array onde contem os filmes quando pesquisamos na API\r\n\t\tif (responseJson) {\r\n\t\t\tsetMovieInfo(responseJson);\r\n\t\t}\r\n\t};\r\n\r\n    getMovieInfo(id)\r\n\r\n    return(\r\n        <>\r\n            <h1>{props.poster} {id}</h1>\r\n            {console.log(movieInfo)}\r\n            <img src={props.poster} alt='movie'/>\r\n\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}