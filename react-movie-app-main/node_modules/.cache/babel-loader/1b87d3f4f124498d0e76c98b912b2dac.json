{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\PROG\\\\exercicios\\\\PROJETO 2\\\\Appmovie\\\\react-movie-app-main\\\\src\\\\pages\\\\MoviePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nexport function MoviePage(props) {\n  _s();\n\n  const [movieInfo, setMovieInfo] = useState(\"a\");\n  const [arrComentario, setArr] = useState(\"\");\n  const id = props.id;\n\n  const getMovieInfo = async id => {\n    const url = `https://api.themoviedb.org/3/find/${id}?api_key=4a6706e6c275ed719d172b6dc5f207f0&language=en-US&external_source=imdb_id`; //quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\n\n    const response = await fetch(url); //aqui ele converte o http para json \n\n    const responseJson = await response.json(); //criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\n    //.Search é a array onde contem os filmes quando pesquisamos na API\n\n    setMovieInfo(responseJson.movie_results[0]);\n  };\n\n  function checkfilme(filme) {\n    return filme === id;\n  }\n\n  const getCommentaryInfo = async () => {\n    const url = `https://ironrest.herokuapp.com/apiDICKvigarista/`; //quando o fetch acontecer ele vai guardar no var response\n\n    const response = await fetch(url);\n    const responseJson = await response.json(); //aqui ele converte o http para json\n\n    var comentarios = responseJson.map(current => {\n      if (current.filme === id) {\n        return current.comentario;\n      }\n    });\n    setArr(comentarios);\n  };\n\n  useEffect(() => {\n    getMovieInfo(id);\n    getCommentaryInfo();\n  }, []);\n  console.log(arrComentario);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movieInfo.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.poster,\n      alt: \"movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: movieInfo.release_date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" \", movieInfo.overview, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"../Main\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \" VOLTAR PARA MAIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MoviePage, \"y2tI4XxuDKFJXavQ0OYt359cC1s=\");\n\n_c = MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"sources":["F:/PROG/exercicios/PROJETO 2/Appmovie/react-movie-app-main/src/pages/MoviePage.js"],"names":["React","useState","useEffect","Link","MoviePage","props","movieInfo","setMovieInfo","arrComentario","setArr","id","getMovieInfo","url","response","fetch","responseJson","json","movie_results","checkfilme","filme","getCommentaryInfo","comentarios","map","current","comentario","console","log","title","poster","release_date","overview"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAE5B,QAAM,CAACC,SAAD,EAAaC,YAAb,IAA6BN,QAAQ,CAAC,GAAD,CAA3C;AACA,QAAM,CAACO,aAAD,EAAiBC,MAAjB,IAA2BR,QAAQ,CAAC,EAAD,CAAzC;AAEA,QAAMS,EAAE,GAAGL,KAAK,CAACK,EAAjB;;AAEA,QAAMC,YAAY,GAAG,MAAOD,EAAP,IAAc;AACrC,UAAME,GAAG,GAAI,qCAAoCF,EAAG,kFAApD,CADqC,CAErC;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CAHqC,CAIrC;;AACA,UAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CALqC,CAOrC;AACA;;AAEMT,IAAAA,YAAY,CAACQ,YAAY,CAACE,aAAb,CAA2B,CAA3B,CAAD,CAAZ;AACN,GAXE;;AAaA,WAASC,UAAT,CAAoBC,KAApB,EAA0B;AACtB,WAAOA,KAAK,KAAGT,EAAf;AACH;;AAED,QAAMU,iBAAiB,GAAI,YAAY;AACzC,UAAMR,GAAG,GAAI,kDAAb,CADyC,CAEzC;;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACM,UAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAJmC,CAKzC;;AACM,QAAIK,WAAW,GAAGN,YAAY,CAACO,GAAb,CAAkBC,OAAD,IAAa;AAC5C,UAAGA,OAAO,CAACJ,KAAR,KAAkBT,EAArB,EAAwB;AACpB,eACIa,OAAO,CAACC,UADZ;AAGH;AACJ,KANiB,CAAlB;AAQAf,IAAAA,MAAM,CAACY,WAAD,CAAN;AACN,GAfE;;AAiBAnB,EAAAA,SAAS,CAAC,MAAM;AAClBS,IAAAA,YAAY,CAACD,EAAD,CAAZ;AACEU,IAAAA,iBAAiB;AACnB,GAHW,EAGT,EAHS,CAAT;AAKAK,EAAAA,OAAO,CAACC,GAAR,CAAYlB,aAAZ;AAKA,sBACI;AAAA,4BACI;AAAA,gBAAKF,SAAS,CAACqB;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,GAAG,EAAEtB,KAAK,CAACuB,MAAhB;AAAwB,MAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAKtB,SAAS,CAACuB;AAAf;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,sBAAMvB,SAAS,CAACwB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAeI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,SAAT;AAAA,6BAAmB;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA,kBADJ;AAmBH;;GAtEe1B,S;;KAAAA,S","sourcesContent":["import React, { useState , useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function MoviePage(props){\r\n\r\n    const [movieInfo , setMovieInfo] = useState(\"a\");\r\n    const [arrComentario , setArr] = useState(\"\");\r\n\r\n    const id = props.id;\r\n\r\n    const getMovieInfo = async (id) => {\r\n\t\tconst url = `https://api.themoviedb.org/3/find/${id}?api_key=4a6706e6c275ed719d172b6dc5f207f0&language=en-US&external_source=imdb_id`;        \r\n\t\t//quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\r\n\t\tconst response = await fetch(url);\r\n\t\t//aqui ele converte o http para json \r\n\t\tconst responseJson = await response.json();\r\n\r\n\t\t//criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\r\n\t\t//.Search é a array onde contem os filmes quando pesquisamos na API\r\n\t    \r\n        setMovieInfo(responseJson.movie_results[0])         \r\n\t};\r\n\r\n    function checkfilme(filme){\r\n        return filme===id\r\n    }\r\n\r\n    const getCommentaryInfo  = async () => {\r\n\t\tconst url = `https://ironrest.herokuapp.com/apiDICKvigarista/`;        \r\n\t\t//quando o fetch acontecer ele vai guardar no var response\r\n\t\tconst response = await fetch(url);\r\n        const responseJson = await response.json();\r\n\t\t//aqui ele converte o http para json\r\n        var comentarios = responseJson.map((current) => {\r\n            if(current.filme === id){\r\n                return(\r\n                    current.comentario\r\n                )\r\n            }\r\n        }\r\n        )\r\n        setArr(comentarios)\r\n\t};\r\n\r\n    useEffect(() => {\r\n\t\tgetMovieInfo(id)\r\n    getCommentaryInfo()\r\n\t}, []);   \r\n\r\n    console.log(arrComentario)\r\n\r\n   \r\n    \r\n\r\n    return(\r\n        <>\r\n            <h1>{movieInfo.title}</h1>\r\n            <img src={props.poster} alt='movie'/>\r\n            <h2>{movieInfo.release_date}</h2>\r\n            <h3> {movieInfo.overview} </h3>\r\n            {/* <ul>\r\n                {\r\n                    comentarios.map((current,index) => {\r\n                        return(\r\n                           <li>{current}</li>\r\n                        )\r\n                    }\r\n                    )\r\n                }\r\n            </ul> */}\r\n            <Link to=\"../Main\"><button type=\"button\"> VOLTAR PARA MAIN</button></Link>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}