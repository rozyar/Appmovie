{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\PROG\\\\exercicios\\\\PROJETO 2\\\\Appmovie\\\\react-movie-app-main\\\\src\\\\pages\\\\MoviePage.js\";\nimport React from \"react\";\nexport function MoviePage(props) {\n  const geInfo = async searchValue => {\n    const url = `http://www.omdbapi.com/?s=${searchValue}&apikey=d3f77329`; //quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\n\n    const response = await fetch(url); //aqui ele converte o http para json \n\n    const responseJson = await response.json(); //criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\n    //.Search é a array onde contem os filmes quando pesquisamos na API\n\n    if (responseJson.Search) {\n      setMovies(responseJson.Search);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [props.poster, \" \", props.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.poster,\n      alt: \"movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"sources":["F:/PROG/exercicios/PROJETO 2/Appmovie/react-movie-app-main/src/pages/MoviePage.js"],"names":["React","MoviePage","props","geInfo","searchValue","url","response","fetch","responseJson","json","Search","setMovies","poster","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAE5B,QAAMC,MAAM,GAAG,MAAOC,WAAP,IAAuB;AACxC,UAAMC,GAAG,GAAI,6BAA4BD,WAAY,kBAArD,CADwC,CAGxC;;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CAJwC,CAKxC;;AACA,UAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CANwC,CAQxC;AACA;;AACA,QAAID,YAAY,CAACE,MAAjB,EAAyB;AACxBC,MAAAA,SAAS,CAACH,YAAY,CAACE,MAAd,CAAT;AACA;AACD,GAbE;;AAiBA,sBACI;AAAA,4BACI;AAAA,iBAAKR,KAAK,CAACU,MAAX,OAAoBV,KAAK,CAACW,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,GAAG,EAAEX,KAAK,CAACU,MAAhB;AAAwB,MAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAOH;KA1BeX,S","sourcesContent":["import React from \"react\"\r\n\r\nexport function MoviePage(props){\r\n\r\n    const geInfo = async (searchValue) => {\r\n\t\tconst url = `http://www.omdbapi.com/?s=${searchValue}&apikey=d3f77329`;\r\n\t\t\r\n\t\t//quando o fetch acontecer ele vai guardar no var response, e responder um objeto que criamos com a busca\r\n\t\tconst response = await fetch(url);\r\n\t\t//aqui ele converte o http para json \r\n\t\tconst responseJson = await response.json();\r\n\r\n\t\t//criamos a função if para não dar bug e chamar o useState só quando tiver um valor na searchBox\r\n\t\t//.Search é a array onde contem os filmes quando pesquisamos na API\r\n\t\tif (responseJson.Search) {\r\n\t\t\tsetMovies(responseJson.Search);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            <h1>{props.poster} {props.id}</h1>\r\n            <img src={props.poster} alt='movie'/>\r\n\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}